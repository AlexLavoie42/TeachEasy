<head>
    <title>math.js | plot</title>
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.core.css">
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.css">
    <script src="https://unpkg.com/mathlive"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" src="../../Content/Graph.css" />

    <script src="https://unpkg.com/mathjs@5.9.0/dist/math.min.js"></script>

    <script src="https://cdn.plot.ly/plotly-1.35.2.min.js"></script>

    <style>
        input[type=text] {
            width: 300px;
        }

        input {
            padding: 6px;
        }

        body, html, input {
            font-family: sans-serif;
            font-size: 11pt;
        }

        form {
            margin: 20px 0;
        }
    </style>
</head>

@section Scripts{
    @Scripts.Render("~/bundles/text")
}
<div id="toolbar">
    <button class="ql-bold"></button>
    <button class="ql-italic"></button>

    <button id="custom-button">Math</button>
</div>
<div id="editor">
    <p>Hello World!</p>
    <p>Some initial <strong>bold</strong> text</p>
</div>

<div id="graphInfo">
    <form id="form">
        <label for="eq">Enter an equation:</label>
        <input type="text" id="eq" value="y=x" onkeyup="requestEquationInput()" />
    </form>
</div>

<span id="equationErrLog" style="color: red"></span>
<div id="plot"></div>

<script>
    const expressionInput = document.getElementById('eq');
    var requestingEquationInput;//true if wait for equation input is happening
    var equationInputWait;//how long the equation input has been waiting
    var begString;//what the expression was before the user changed it
    var equationErrLog = document.getElementById('equationErrLog');

    function draw() {
        try {
            // compile the expression once
            const expression = expressionInput.value;
            begString = expression;//begString gets updated every draw()
            const expr = math.compile(expression);

            // evaluate the expression repeatedly for different values of x
            const xValues = math.range(-10, 10, 0.5).toArray();
            const yValues = xValues.map(function (x) {
                return expr.eval({ x: x });
            });

            // render the plot using plotly
            const trace1 = {
                x: xValues,
                y: yValues,
                type: 'scatter'
            };
            const data = [trace1];
            Plotly.newPlot('plot', data);
            equationLog.innerHTML = "";
        }
        catch (err) {
            //this automanically may happen, so don't let this specific error appear
            if(err.toString() != "ReferenceError: equationLog is not defined")
                equationErrLog.innerHTML = err;
        }
    }

    /*waits a second to check if the user is still typing out the graph equation. If
     * not, update the graph. */
    function requestEquationInput() {
        if (!requestingEquationInput) {
            requestingEquationInput = true;
            equationInputWait = 0;

            //the updated expression string
            let curString = expressionInput.value;

            let interval = window.setInterval(function () {
                equationInputWait++;

                //if the wait is complete and the equation isn't changed, do nothing
                if (equationInputWait == 10 && curString == begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    window.clearInterval(interval);
                }

                //otherwise, if the wait is complete and the equation is changed, draw()
                else if (equationInputWait == 10 && curString != begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    draw();
                    window.clearInterval(interval);
                }
            }, 100);
        } else {//if the user keeps typing while the input is waiting, restart the wait
            equationInputWait = 0;
        }
    }

    draw();
</script>