<head>
    <title>math.js | plot</title>
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.core.css">
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.css">
    <script src="https://unpkg.com/mathlive"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" src="../../Content/Graph.css" />

    <script src="https://unpkg.com/mathjs@5.9.0/dist/math.min.js"></script>

    <script src="https://cdn.plot.ly/plotly-1.35.2.min.js"></script>

    <style>
        input[type=text] {
            width: 300px;
        }

        input {
            padding: 6px;
        }

        body, html, input {
            font-family: sans-serif;
            font-size: 11pt;
        }

        form {
            margin: 20px 0;
        }
    </style>
</head>

@section Scripts{
    @Scripts.Render("~/bundles/text")
}
<div id="toolbar">
    <button class="ql-bold"></button>
    <button class="ql-italic"></button>

    <button id="custom-button">Math</button>
</div>
<div id="editor">
    <p>Hello World!</p>
    <p>Some initial <strong>bold</strong> text</p>
</div>

<div id="graphInfo">
    <form id="form">
        <label for="eq">Enter an equation:</label>
        <input type="text" id="eq" value="y=x" onkeyup="requestEquationInput()" onfocus="toggleKeyboard()" />
    </form>
</div>

<span id="equationErrLog" style="color: red"></span>
<div id="plot"></div>

<!--This appears when the user is typing an equation for the graph-->
<table id="keyboard">
    <tr>
    <td id="ac">AC</td>
    <td id="exp">x<sup>y</sup></td>
    <td id="fac">x!</td>
    <td id="pi">&pi;</td>
    <td id="lBrack">(</td>
    <td id="rBrack">)</td>
    <td id="modulus">%</td>
    </tr>

    <tr>
    <td id="clear">C</td>
    <td id="sroot">&radic;</td>
    <td id="expSroot"><sup>x</sup>&radic;</td>
    <td id="7">7</td>
    <td id="8">8</td>
    <td id="9">9</td>
    <td id="div">&#247;</td>
    </tr>

    <tr>
    <td id="sin">sin</td>
    <td id="cos">cos</td>
    <td id="tan">tan</td>
    <td id="4">4</td>
    <td id="5">5</td>
    <td id="6">6</td>
    <td id="mult">&#215;</td>
    </tr>

    <tr>
    <td id="log">log</td>
    <td id="ln">ln</td>
    <td id="e">e</td>
    <td id="1">1</td>
    <td id="2">2</td>
    <td id="3">3</td>
    <td id="sub">-</td>
    </tr>

    <tr>
    <td id="rad">Rad</td>
    <td id="deg">Deg</td>
    <td id="ans">Ans</td>
    <td id="decimal">.</td>
    <td id="0">0</td>
    <td id="plus">+</td>
    <td id="equals">=</td>
    </tr>
</table>

<script>
    const expressionInput = document.getElementById('eq');
    var requestingEquationInput;//true if wait for equation input is happening
    var equationInputWait;//how long the equation input has been waiting
    var begString;//what the expression was before the user changed it
    var equationErrLog = document.getElementById('equationErrLog');

    function draw() {
        try {
            // compile the expression once
            const expression = expressionInput.value;
            begString = expression;//begString gets updated every draw()
            const expr = math.compile(expression);

            // evaluate the expression repeatedly for different values of x
            const xValues = math.range(-10, 10, 0.5).toArray();
            const yValues = xValues.map(function (x) {
                return expr.eval({ x: x });
            });

            // render the plot using plotly
            const trace1 = {
                x: xValues,
                y: yValues,
                type: 'scatter'
            };
            const data = [trace1];
            Plotly.newPlot('plot', data);
            equationErrLog.innerHTML = "";
        }
        catch (err) {
            //this automanically may happen, so don't let this specific error appear
            if(err.toString() != "ReferenceError: equationLog is not defined")
                equationErrLog.innerHTML = err;
        }
    }

    /*waits a second to check if the user is still typing out the graph equation. If
     * not, update the graph. */
    function requestEquationInput() {
        if (!requestingEquationInput) {
            requestingEquationInput = true;
            equationInputWait = 0;

            //the updated expression string
            let curString = expressionInput.value;

            let interval = window.setInterval(function () {
                equationInputWait++;

                //if the wait is complete and the equation isn't changed, do nothing
                if (equationInputWait == 10 && curString == begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    window.clearInterval(interval);
                }

                //otherwise, if the wait is complete and the equation is changed, draw()
                else if (equationInputWait == 10 && curString != begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    draw();
                    window.clearInterval(interval);
                }
            }, 100);
        } else {//if the user keeps typing while the input is waiting, restart the wait
            equationInputWait = 0;
        }
    }

    draw();

    //MATH KEYBOARD//////
    //variables for all keys
    var clearAllKey = document.getElementById("ac");
    var exponentKey = document.getElementById("exp");
    var factorialKey = document.getElementById("fac");
    var piKey = document.getElementById("pi");
    var leftBracketKey = document.getElementById("lBracket");
    var rightBracketKey = document.getElementById("rBracket");
    var modulusKey = document.getElementById("modulus");
    var clearKey = document.getElementById("clear");
    var squareRootKey = document.getElementById("sroot");
    var expSquareRootKey = document.getElementById("expSroot");
    var sevenKey = document.getElementById("7");
    var eightKey = document.getElementById("8");
    var nineKey = document.getElementById("9");
    var divisionKey = document.getElementById("div");
    var sinKey = document.getElementById("sin");
    var cosKey = document.getElementById("cos");
    var tanKey = document.getElementById("tan");
    var fourKey = document.getElementById("4");
    var fiveKey = document.getElementById("5");
    var sixKey = document.getElementById("6");
    var multiplyKey = document.getElementById("mult");
    var logKey = document.getElementById("log");
    var lnKey = document.getElementById("ln");
    var eKey = document.getElementById("e");
    var oneKey = document.getElementById("1");
    var twoKey = document.getElementById("2");
    var three = document.getElementById("3");
    var subtractKey = document.getElementById("sub");
    var radientKey = document.getElementById("rad");
    var degreeKey = document.getElementById("deg");
    var ansKey = document.getElementById("ans");
    var decimalKey = document.getElementById("decimal");
    var zeroKey = document.getElementById("0");
    var plusKey = document.getElementById("plus");
    var equalsKey = document.getElementById("equals");

    //returns the px representation of the percent argument in relation to height
    function getHeightByPercent(percent) {
        return window.innerHeight / 100 * percent;
    }

    //the y position of the keyboard
    const endPageY = window.innerHeight;
    var keyboard = document.getElementById("keyboard");
    keyboard.style.top = endPageY + "px";

    //pulls up/down the virtual keyboard
    var keyboardDisplay;
    var keyboardToggling;//if the keyboard is being pulled up or down
    function toggleKeyboard() {
        let dy;//endPageY - this = position of keyboard
        let scrollY = window.scrollY;

        if (!keyboardToggling) {
            keyboardToggling = true;

            if (!keyboardDisplay) {//if the keyboard isn't displayed, pull it up
                dy = 0;

                let interval = window.setInterval(function () {
                    dy += 2;
                    keyboard.style.top = endPageY - getHeightByPercent(dy) + "px";
                    document.body.style.paddingBottom = getHeightByPercent(dy) + "px";
                    window.scrollTo(0, scrollY + getHeightByPercent(dy));

                    if (dy == 40) {
                        keyboardToggling = false;
                        keyboardDisplay = true;
                        window.clearInterval(interval);
                    }
                }, 25);
            } else {//if the keyboard is displayed, pull it down
                dy = 40;

                let interval = window.setInterval(function () {
                    dy -= 2;
                    keyboard.style.top = endPageY - getHeightByPercent(dy) + "px";
                    document.body.style.paddingBottom = getHeightByPercent(dy) + "px";
                    window.scrollTo(0, scrollY + getHeightByPercent(dy));

                    if (dy == 0) {
                        keyboardToggling = false;
                        keyboardDisplay = false;
                        window.clearInterval(interval);
                    }
                }, 25);
            }
        }
    }

    //add event listeners for the keys so that the virtual keys get highlighted
    window.onkeydown = function (e) {
        switch (e.key) {
            case '0':

        }
    };

    window.onkeyup = function (e) {

    };
</script>