<head>
    <title>math.js | plot</title>
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.core.css">
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.css">
    <script src="https://unpkg.com/mathlive"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" src="../../Content/Graph.css" />

    <script src="https://unpkg.com/mathjs@5.9.0/dist/math.min.js"></script>

    <script src="https://cdn.plot.ly/plotly-1.35.2.min.js"></script>

    <style>
        input[type=text] {
            width: 300px;
        }

        input {
            padding: 6px;
        }

        body, html, input {
            font-family: sans-serif;
            font-size: 11pt;
        }

        form {
            margin: 20px 0;
        }
    </style>
</head>

@section Scripts{
    @Scripts.Render("~/bundles/text")
}
<div id="toolbar">
    <button class="ql-bold"></button>
    <button class="ql-italic"></button>

    <button id="custom-button">Math</button>
</div>
<div id="editor">
    <p>Hello World!</p>
    <p>Some initial <strong>bold</strong> text</p>
</div>

<form id="form">
    <label for="eq">Enter an equation:</label>
    <input type="text" id="eq" value="y=x" onkeyup="requestEquationInput()" />
</form>

<div id="plot"></div>

<script>
    const expressionInput = document.getElementById('eq');
    var requestingEquationInput;//true if wait for equation input is happening

    function draw() {
        try {
            // compile the expression once
            const expression = expressionInput.value;
            const expr = math.compile(expression);

            // evaluate the expression repeatedly for different values of x
            const xValues = math.range(-10, 10, 0.5).toArray();
            const yValues = xValues.map(function (x) {
                return expr.eval({ x: x });
            });

            // render the plot using plotly
            const trace1 = {
                x: xValues,
                y: yValues,
                type: 'scatter'
            };
            const data = [trace1];
            Plotly.newPlot('plot', data);
        }
        catch (err) {
            console.error(err);
            alert(err);
        }
    }

    /*waits a second to check if the user is still typing out the graph equation. If
     * not, update the graph. */
    function requestEquationInput() {
        if (!requestingEquationInput) {
            requestingEquationInput = true;

            let begString = expressionInput.value;
            let curString;

            let wait = 0;
            let interval = window.setInterval(function () {
                wait++;

                curString = expressionInput.value;

                //clear the waiting process and do nothing if the equation isn't changed by the end of the wait
                if (wait == 10 && begString == curString) {
                    requestingEquationInput = false;
                    window.clearInterval(interval);
                }
                //draw the equation onto the graph if the equation has been changed
                else if (wait == 10 && begString != curString) {
                    if (testEquation)
                        draw();

                    requestingEquationInput = false;
                    window.clearInterval(interval);
                }
            }, 100);
        }
    }

    //returns true if the equation can be drawn onto the board
    function testEquation() {
        let boolean = true;

        

        return boolean;
    }

    draw();
</script>