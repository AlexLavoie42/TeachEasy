<!DOCTYPE html>
<head>
    <title>math.js | plot</title>
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.core.css">
    <link rel="stylesheet" href="https://unpkg.com/mathlive/dist/mathlive.css">
    <script src="https://unpkg.com/mathlive"></script>

    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" src="../../Content/Graph.css" />

    <script src="https://unpkg.com/mathjs@5.9.0/dist/math.min.js"></script>

    <script src="https://cdn.plot.ly/plotly-1.35.2.min.js"></script>

    <style>
        input[type=text] {
            width: 300px;
        }

        input {
            padding: 6px;
        }

        body, html, input {
            font-family: sans-serif;
            font-size: 11pt;
        }

        form {
            margin: 20px 0;
        }
    </style>
</head>

@section Scripts{
    @Scripts.Render("~/bundles/text")
}
@Styles.Render("~/Content/Graph.css")
<div id="toolbar">
    <button class="ql-bold"></button>
    <button class="ql-italic"></button>

    <button id="custom-button">Math</button>
</div>
<div id="editor">
    <p>Hello World!</p>
    <p>Some initial <strong>bold</strong> text</p>
</div>

<div id="graphInfo">
    <form id="form">
        <label for="eq">Enter an equation: y=</label>
        <input type="text" id="eq" value="x" onkeyup="requestEquationInput()" onclick="toggleKeyboard()"/>
    </form>
</div>

<span id="equationErrLog" style="color: red"></span>
<div id="plot"></div>

<!--This appears when the user is typing an equation for the graph-->
<table id="keyboard">
    <tr>
    <td id="ac" onclick="clearEquation()">AC</td>
    <td id="exp" onclick="insertKeyToEquation('^')">x<sup>y</sup></td>
    <td id="fac" onclick="insertKeyToEquation('!')">x!</td>
    <td id="pi" onclick="insertKeyToEquation('pi')">&pi;</td>
    <td id="lBrack" onclick="insertKeyToEquation('(')">(</td>
    <td id="rBrack" onclick="insertKeyToEquation(')')">)</td>
    <td id="modulus" onclick="toggleKeyboard()">&#8595;</td>
    </tr>

    <tr>
    <td id="clear" onclick="clearLastKeyEquation()">C</td>
    <td id="sroot" onclick="insertKeyToEquation('sqrt(')">&radic;</td>
    <td id="cubeRoot" onclick="insertKeyToEquation('cbrt(')"><sup>3</sup>&radic;</td>
    <td id="7" onclick="insertKeyToEquation('7')">7</td>
    <td id="8" onclick="insertKeyToEquation('8')">8</td>
    <td id="9" onclick="insertKeyToEquation('9')">9</td>
    <td id="modulus" onclick="insertKeyToEquation('%')">%</td>
    </tr>

    <tr>
    <td id="sin" onclick="insertKeyToEquation('sin(')">sin</td>
    <td id="cos" onclick="insertKeyToEquation('cos(')">cos</td>
    <td id="tan" onclick="insertKeyToEquation('tan(')">tan</td>
    <td id="4" onclick="insertKeyToEquation('4')">4</td>
    <td id="5" onclick="insertKeyToEquation('5')">5</td>
    <td id="6" onclick="insertKeyToEquation('6')">6</td>
    <td id="div" onclick="insertKeyToEquation('/')">&#247;</td>
    </tr>

    <tr>
    <td id="log" onclick="insertKeyToEquation('log(')">log</td>
    <td id="ln" onclick="insertKeyToEquation('log()/log(e)\r\r\r')">ln</td>
    <td id="e" onclick="insertKeyToEquation('e')">e</td>
    <td id="1" onclick="insertKeyToEquation('1')">1</td>
    <td id="2" onclick="insertKeyToEquation('2')">2</td>
    <td id="3" onclick="insertKeyToEquation('3')">3</td>
    <td id="mult" onclick="insertKeyToEquation('*')">&#215;</td>
    </tr>

    <tr style="position: relative; left: 6.25%">
    <td id="x" onclick="insertKeyToEquation('x')">x</td>
    <td id="decimal" onclick="insertKeyToEquation('.')">.</td>
    <td id="0" onclick="insertKeyToEquation('0')">0</td>
    <td id="plus" onclick="insertKeyToEquation('+')">+</td>
    <td id="equals" onclick="insertKeyToEquation('=')">=</td>
    <td id="sub" onclick="insertKeyToEquation('-')">-</td>
    </tr>
</table>

<script>
    const expressionInput = document.getElementById('eq');
    var requestingEquationInput;//true if wait for equation input is happening
    var equationInputWait;//how long the equation input has been waiting
    var begString;//what the expression was before the user changed it
    var equationErrLog = document.getElementById('equationErrLog');

    function draw() {
        try {
            // compile the expression once
            const expression = "y=" + expressionInput.value;
            begString = expression;//begString gets updated every draw()
            const expr = math.compile(expression);

            // evaluate the expression repeatedly for different values of x
            const xValues = math.range(-10, 10, 0.5).toArray();
            const yValues = xValues.map(function (x) {
                return expr.eval({ x: x });
            });

            // render the plot using plotly
            const trace1 = {
                x: xValues,
                y: yValues,
                type: 'scatter'
            };
            const data = [trace1];
            Plotly.newPlot('plot', data);
            equationErrLog.innerHTML = "";
        }
        catch (err) {
            //this automanically may happen, so don't let this specific error appear
            if(err.toString() != "ReferenceError: equationLog is not defined")
                equationErrLog.innerHTML = err;
        }
    }

    /*waits a second to check if the user is still typing out the graph equation. If
     * not, update the graph. */
    function requestEquationInput() {
        if (!requestingEquationInput) {
            requestingEquationInput = true;
            equationInputWait = 0;

            //the updated expression string
            let curString = "y=" + expressionInput.value;

            let interval = window.setInterval(function () {
                equationInputWait++;

                //if the wait is complete and the equation isn't changed, do nothing
                if (equationInputWait == 10 && curString == begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    window.clearInterval(interval);
                }

                //otherwise, if the wait is complete and the equation is changed, draw()
                else if (equationInputWait == 10 && curString != begString) {
                    equationInputWait = 0;
                    requestingEquationInput = false;
                    draw();
                    window.clearInterval(interval);
                }
            }, 100);
        } else {//if the user keeps typing while the input is waiting, restart the wait
            equationInputWait = 0;
        }
    }

    draw();

    //MATH KEYBOARD//////
    //variables for all keys
    var clearAllKey = document.getElementById("ac");
    var exponentKey = document.getElementById("exp");
    var factorialKey = document.getElementById("fac");
    var piKey = document.getElementById("pi");
    var leftBracketKey = document.getElementById("lBracket");
    var rightBracketKey = document.getElementById("rBracket");
    var modulusKey = document.getElementById("modulus");
    var clearKey = document.getElementById("clear");
    var squareRootKey = document.getElementById("sroot");
    var cubeRootKey = document.getElementById("cubeRoot");
    var sevenKey = document.getElementById("7");
    var eightKey = document.getElementById("8");
    var nineKey = document.getElementById("9");
    var divisionKey = document.getElementById("div");
    var sinKey = document.getElementById("sin");
    var cosKey = document.getElementById("cos");
    var tanKey = document.getElementById("tan");
    var fourKey = document.getElementById("4");
    var fiveKey = document.getElementById("5");
    var sixKey = document.getElementById("6");
    var multiplyKey = document.getElementById("mult");
    var logKey = document.getElementById("log");
    var lnKey = document.getElementById("ln");
    var eKey = document.getElementById("e");
    var oneKey = document.getElementById("1");
    var twoKey = document.getElementById("2");
    var threeKey = document.getElementById("3");
    var subtractKey = document.getElementById("sub");
    var decimalKey = document.getElementById("decimal");
    var zeroKey = document.getElementById("0");
    var plusKey = document.getElementById("plus");
    var equalsKey = document.getElementById("equals");

    //returns the px representation of the percent argument
    function getWidthByPercent(percent) {
        return window.innerWidth / 100 * percent;
    }

    function getHeightByPercent(percent) {
        return window.innerHeight / 100 * percent;
    }

    //the y position of the keyboard
    const endPageY = window.innerHeight;
    var keyboard = document.getElementById("keyboard");
    keyboard.style.top = endPageY + "px";

    function highlightKey(key, color) {
        if (keyboardDisplay) {
            switch (key) {
                case '^':
                    exponentKey.style.backgroundColor = color;
                    break;
                case '!':
                    factorialKey.style.backgroundColor = color;
                    break;
                case '(':
                    leftBracketKey.style.backgroundColor = color;
                    break;
                case ')':
                    rightBracketKey.style.backgroundColor = color;
                    break;
                case '%':
                    modulusKey.style.backgroundColor = color;
                    break;
                case '7':
                    sevenKey.style.backgroundColor = color;
                    break;
                case '8':
                    eightKey.style.backgroundColor = color;
                    break;
                case '9':
                    nineKey.style.backgroundColor = color;
                    break;
                case '/':
                    divisionKey.style.backgroundColor = color;
                    break;
                case '4':
                    fourKey.style.backgroundColor = color;
                    break;
                case '5':
                    fiveKey.style.backgroundColor = color;
                    break;
                case '6':
                    sixKey.style.backgroundColor = color;
                    break;
                case '*':
                case 'x':
                    multiplyKey.style.backgroundColor = color;
                    break;
                case 'e':
                    eKey.style.backgroundColor = color;
                    break;
                case '1':
                    oneKey.style.backgroundColor = color;
                    break;
                case '2':
                    twoKey.style.backgroundColor = color;
                    break;
                case '3':
                    threeKey.style.backgroundColor = color;
                    break;
                case '-':
                    subtractKey.style.backgroundColor = color;
                    break;
                case '.':
                    decimalKey.style.backgroundColor = color;
                    break;
                case '0':
                    zeroKey.style.backgroundColor = color;
                    break;
                case '+':
                    plusKey.style.backgroundColor = color;
                    break;
                case '=':
                    equalsKey.style.backgroundColor = color;
                    break;
            }
        }
    }

    var grey = "#d4d4d4";
    var darkGrey = "#808080";

    //add event listeners for the keys so that the virtual keys get highlighted
    window.onkeydown = function (e) {
        highlightKey(e.key, darkGrey);
    };

    window.onkeyup = function (e) {
        highlightKey(e.key, grey);
    };

    function insertKeyToEquation(key) {
        expressionInput.value += key;
        requestEquationInput();
        expressionInput.focus();
    }

    function clearLastKeyEquation() {
        expressionInput.value = expressionInput.value.substring(0, expressionInput.value.length - 1);

        //check if the last value inputted is a keyword. If so, delete the keyword
        if (expressionInput.value.length == 3)//if there are only 3 characters, check for keyword
            clearKeyword(0);
        else if (expressionInput.value.length >= 4) {
            if (!clearKeyword(1))
                clearKeyword(0);//if no 4-letter keyword is found, check for a 3-letter keyword
        }

        expressionInput.focus();
    }

    //clears keywords. If param == 0, it clears any 3-letter keywords, if == 1, clears 4-letter keywords
    //returns true if a keyword is cleared
    function clearKeyword(val) {
        if (val == 0)
            switch (expressionInput.value.substring(expressionInput.value.length - 3, expressionInput.value.length)) {
                case 'sin':
                case 'cos':
                case 'tan':
                case 'log':
                    expressionInput.value = expressionInput.value.substring(0, expressionInput.value.length - 3);
                    return true;
            }
        else
            switch (expressionInput.value.substring(expressionInput.value.length - 4, expressionInput.value.length)) {
                case 'sqrt':
                case 'cbrt':
                    expressionInput.value = expressionInput.value.substring(0, expressionInput.value.length - 4);
                    return true;
            }

        return false;
    }

    function clearEquation() {
        expressionInput.value = "x";
        requestEquationInput();
        expressionInput.focus();
    }

    //pulls up/down the virtual keyboard
    var mobile;//if the screen is mobile. If so, only the phone keyboard is used.
    var keyboardDisplay;
    var keyboardToggling;//if the keyboard is being pulled up or down
    function toggleKeyboard() {
        if (!mobile) {
            let dy;//endPageY - this = position of keyboard
            let scrollY = window.scrollY;

            if (!keyboardToggling) {
                keyboardToggling = true;

                if (!keyboardDisplay) {//if the keyboard isn't displayed, pull it up
                    dy = 0;

                    let interval = window.setInterval(function () {
                        dy += 4;
                        keyboard.style.top = endPageY - getHeightByPercent(dy) + "px";
                        document.body.style.paddingBottom = getHeightByPercent(dy) + "px";

                        if (dy == 40) {
                            keyboardToggling = false;
                            keyboardDisplay = true;
                            window.clearInterval(interval);
                        }
                    }, 25);
                } else {//if the keyboard is displayed, pull it down
                    dy = 40;

                    let interval = window.setInterval(function () {
                        dy -= 4;
                        keyboard.style.top = endPageY - getHeightByPercent(dy) + "px";
                        document.body.style.paddingBottom = getHeightByPercent(dy) + "px";

                        if (dy == 0) {
                            keyboardToggling = false;
                            keyboardDisplay = false;
                            window.clearInterval(interval);
                        }
                    }, 25);
                }
            }
        } else {

        }
    }
</script>